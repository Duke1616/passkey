// Code generated by MockGen. DO NOT EDIT.
// Source: ./passkey.go

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	http "net/http"
	domain "passkey-demo/internal/domain"
	reflect "reflect"

	protocol "github.com/go-webauthn/webauthn/protocol"
	webauthn "github.com/go-webauthn/webauthn/webauthn"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// BeginLogin mocks base method.
func (m *MockService) BeginLogin(ctx context.Context, user *domain.User) (*protocol.CredentialAssertion, *webauthn.SessionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginLogin", ctx, user)
	ret0, _ := ret[0].(*protocol.CredentialAssertion)
	ret1, _ := ret[1].(*webauthn.SessionData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BeginLogin indicates an expected call of BeginLogin.
func (mr *MockServiceMockRecorder) BeginLogin(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginLogin", reflect.TypeOf((*MockService)(nil).BeginLogin), ctx, user)
}

// BeginRegistration mocks base method.
func (m *MockService) BeginRegistration(ctx context.Context, user *domain.User) (*protocol.CredentialCreation, *webauthn.SessionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginRegistration", ctx, user)
	ret0, _ := ret[0].(*protocol.CredentialCreation)
	ret1, _ := ret[1].(*webauthn.SessionData)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BeginRegistration indicates an expected call of BeginRegistration.
func (mr *MockServiceMockRecorder) BeginRegistration(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginRegistration", reflect.TypeOf((*MockService)(nil).BeginRegistration), ctx, user)
}

// FinishLogin mocks base method.
func (m *MockService) FinishLogin(user *domain.User, session webauthn.SessionData, request *http.Request) (*webauthn.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishLogin", user, session, request)
	ret0, _ := ret[0].(*webauthn.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishLogin indicates an expected call of FinishLogin.
func (mr *MockServiceMockRecorder) FinishLogin(user, session, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishLogin", reflect.TypeOf((*MockService)(nil).FinishLogin), user, session, request)
}

// FinishRegistration mocks base method.
func (m *MockService) FinishRegistration(user *domain.User, session webauthn.SessionData, request *http.Request) (*webauthn.Credential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishRegistration", user, session, request)
	ret0, _ := ret[0].(*webauthn.Credential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishRegistration indicates an expected call of FinishRegistration.
func (mr *MockServiceMockRecorder) FinishRegistration(user, session, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishRegistration", reflect.TypeOf((*MockService)(nil).FinishRegistration), user, session, request)
}
